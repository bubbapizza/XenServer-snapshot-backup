#!/bin/sh
#
# This script has all the functions for starting up progress clients,
# starting/stopping Progress databases, and running progress batch scripts.
#
# Shawn Wilson
# Applied Computer Solutions
#

prefix=@prefix@
datarootdir=@datarootdir@
exec_prefix=@exec_prefix@


# Initialize all the local database startup settings, directories, etc.
PROCONFIG=${PROCONFIG:-'default'}
. @sysconfdir@/@PACKAGE@/${PROCONFIG}-config

# Add datadir to the path because we have some progress code in that
# directory that the functions below use.
PROPATH=@datadir@/@PACKAGE@:${PROPATH}

# This is the location of the Shop Manager source code, logs and data.
BINDIR=@bindir@
DATADIR=@datadir@/@PACKAGE@
LOGDIR=@localstatedir@/log/@PACKAGE@
LIBDIR=@datadir@/@PACKAGE@
LIBEXECDIR=@localstatedir@/lib/@PACKAGE@
CONFIGDIR=@sysconfdir@/@PACKAGE@


# The presence of this lock file prevents clients from starting up.
LOCKFILE=$LIBEXECDIR/db-lockout

# These are the commands for starting/stopping and connecting to
# progress databases.
PROSRVEXE="${DLC}/bin/_mprosrv"
PROSHUT="${DLC}/bin/proshut"
PRODB="${DLC}/bin/prodb"
PROEXE="${DLC}/bin/_progres"

# Set the default database path and name(s).
DB_PATH=${DB_PATH:-'@DB_PATH@'}
DB_DEFAULT=${DB_DEFAULT:-'@DB_DEFAULT@'}


#########
# FUNCTIONS
#########

##### GENERAL FUNCTIONS #####

# Function to get the process ID of a command.
get_pid () {
   
   cmdstr=$@

   # These lines here are to get around the fact that grep freaks out
   # if we have spaces in the command we're searching for.  Thus we create
   # a temporary little file that has the string of what we're searching 
   # for.  
   grepfile=/tmp/grepfile$$

   # We have to truncate the cmdstr to 70 characters because the SCO
   # 'ps -eo' command also truncates the command.  Thus, we can't find the 
   # PID if we don't do this.
   if [ "`uname`" = "SCO_SV" ] ; then
      echo $cmdstr | cut -c 1-70 > $grepfile
   else
      echo $cmdstr > $grepfile
   fi

   # This is fancy code for pulling out all the processes that are running
   # via the given string.
   PID=`ps -eo pid,args | grep -f $grepfile | grep -v grep | awk '{ print $1 }'`
   echo $PID
}


##### DATABASE FUNCTIONS #####

#
# This function returns the shell command to start a database. 
# It takes a database name as a parameter
#
db_start_cmd () {
   dbname=$1

   # If the database is of the form physical/logical name, then use
   # dirname to get the physical name.
   if [ "`dirname ${dbname}`" != "." ] ; then
      dbname=`dirname $1`
   fi

   # Figure out what parameter file to use.
   if [ -e ${CONFIGDIR}/${dbname}-server.pf ] ; then
      dbparam="-pf ${CONFIGDIR}/${dbname}-server.pf"
   else
      dbparam="-pf ${CONFIGDIR}/default-server.pf"
   fi

   #
   # If the database name ends with '-SQL', then strip the .SQL
   # from the database name and start it up as a SQL server.
   #
   if [ "`basename $dbname -SQL`-SQL" != "${dbname}" ] ; then
      cmd="$PROSRVEXE ${DB_PATH}/${dbname} ${dbparam}"
   else
      cmd="$PROSRVEXE ${DB_PATH}/`basename ${dbname} -SQL` ${dbparam} -ServerType SQL"
   fi


   #
   # Print out the command line for starting the database.
   #
   echo $cmd
}


#
# This function returns the shell command to stop a database.
# It takes a database name as a parameter
#
db_stop_cmd () {
   dbname=$1

   #
   # Print out the command line for stopping the database.
   #
   echo "$PROSHUT ${DB_PATH}/${dbname}"
}


#
# Start up a Progress database.  Takes a single argument which is the
# name of the database.
#
db_start () {
   dbname=$1

   # If the database is of the form physical/logical name, then use
   # dirname to get the physical name.
   if [ "`dirname ${dbname}`" != "." ] ; then
      dbname=`dirname $1`
   fi

   # Check to make sure the database is not already running.  If it isn't,
   # then start it up.
   PID=`get_db_pid $dbname`
   if [ "x$PID" = "x" ] ; then

      echo -n "Starting database $dbname..."
   
      # Figure out the command to start the database.
      cmd=`db_start_cmd $dbname`

      # Make sure the database exists.  If it doesn't, then create a blank
      # one.
      if [ ! -e ${DB_PATH}/`basename ${dbname} -SQL`.db ] ; then
         echo
         echo "Cannot find database, creating an empty one..."
         echo
         mkdir -p ${DB_PATH}
         $PRODB ${DB_PATH}/`basename ${dbname} -SQL` empty
      fi
         

      # Make sure the log file exists.  If it doesn't, then create it.
      if [ ! -e ${LOGDIR}/${dbname}-err.log ] ; then
         mkdir -p ${LOGDIR}
         touch ${LOGDIR}/${dbname}-err.log
      fi

      # Start the Progress database.
      $cmd >>${LOGDIR}/${dbname}-err.log
   
      if [ $? -eq 0 ] ; then
         echo "OK"
         return 0
      else
         echo "Failed"
         return 1
      fi
   fi
}

#
# Stop a Progress database.  Takes a single argument which is the
# name of the database.
#
db_stop () {
   dbname=$1

   # If the database is of the form physical/logical name, then use
   # dirname to get the physical name.
   if [ "`dirname ${dbname}`" != "." ] ; then
      dbname=`dirname $1`
   fi

   # Check to make sure the database is running.  If it isn't, then stop it.
   PID=`get_db_pid $dbname`
   if [ "x$PID" != "x" ] ; then

      echo -n "Stopping database $dbname..."
   
      # Figure out the command to stop the database.
      cmd=`db_stop_cmd $dbname`

      # Start the Progress database.
      echo 2 | $cmd >>${LOGDIR}/${dbname}-err.log
   
      if [ $? -eq 0 ] ; then
         echo "OK"
      else
         echo "Failed"
      fi
   fi
}

#
# Get the PID of a Progress database.
#
get_db_pid () {
   
   # Figure out the command to stop the database.
   cmd=`db_start_cmd $1`

   # Get the process ID of the command.
   get_pid $cmd
}
   
#
# Get the status of a database
#
db_status () {
   dbname=$1

   PID=`get_db_pid $dbname`

   if [ "x$PID" = "x" ]; then
      echo "Database $dbname is stopped."
   else
      echo "Database $dbname is started (PID=$PID)."
   fi
}


#
# Start multiple databases.
#
mdb_start () {
   dblist=$@

   for dbname in $dblist
   do 
      db_start $dbname
   done
}

#
# Stop multiple databases.
#
mdb_stop () {
   dblist=$@

   for dbname in $dblist
   do 
      db_stop $dbname
   done
}

#
# Get the status of multiple databases.
#
mdb_status () {
   dblist=$@

   for dbname in $dblist
   do 
      db_status $dbname
   done
}



##### CLIENT FUNCTIONS #####

#
# This function returns the shell command to connect to the default
# database(s).
#
dbconnect_cmd () {

   # Set the client parameter file.
   dbparam=${CLIENT_PARAM_FILE:-'default-client.pf'}

   # Build a list of database parameters to pass.
   dblist=''
   for dbname in ${DB_DEFAULT} ; do
      #
      # If the database name doesn't end with '-SQL', then 
      # append the database name to the database list.
      #
      if [ "`basename $dbname -SQL`-SQL" != "${dbname}" ] ; then
         #
         # If the database name is in the form of physical/logical
         # name, then we do some sneakiness to with dirname and basname
         # to build the logical name parameter
         #
         if [ "`dirname ${dbname}`" = "." ] ; then
            dblist="${dblist} -db ${DB_PATH}/${dbname}"
         else
            dblist="${dblist} -db ${DB_PATH}/`dirname ${dbname}` -ld `basename ${dbname}`"
         fi
      fi 
   done

   #
   # Print out the command line for connecting to the database(s)
   #
   echo "$PROEXE -pf ${CONFIGDIR}/${dbparam} ${dblist}"
}


# Check to see if the db-lockout file exists.  If it does, then we're
# doing some development changes so keep users out.
check_lockout () {
   if [ -e $LOCKFILE ] ; then
      echo Making changes to the WFS database.  Please login at a later time.
      exec sleep 5
   fi

   return
}

# Start up a Progress session in interactive mode.
progress_run () {
   if [ "x$1" = "x" ] ; then
      `dbconnect_cmd`
   else
      `dbconnect_cmd` -p $1
   fi
}

# Execute a single progress source file in batch mode.  Args are the
# source file name and, optionally, the arguments for the .p file.
progress_run_batch () {
   prog=$1

   # Check to see if an option argument was supplied.
   if [ $# -gt 1 ] ; then
      `dbconnect_cmd` -b -p $prog -param $2
   else
      `dbconnect_cmd` -b -p $prog
   fi
}

# Get a list of the current Progress client session PIDs.
get_progress_pids () {
   get_pid `dbconnect_cmd`
}


##### DAEMON FUNCTIONS #####

# Return the status of a Progress session running as a daemon.
progress_daemon_pid () {
   prog=$1
   cmd="`dbconnect_cmd` -b -p $prog"

   # Return the list of daemons with this name running.
   get_pid $cmd
}

# Start a Progress batch mode session in the background.
progress_daemon_start () {
   prog=$1
   name="${2:-$prog}"
   cmd="`dbconnect_cmd` -b -p $prog"

   # Make sure the process isn't already running, then start it up.
   PID=`progress_daemon_pid $prog`
   if [ "x$PID" != "x" ] ; then
      echo "$name is already started (PID=${PID})."
      return 1
   else
      logfile=${prog%.p}.log

      # Start the daemon.
      echo -n "Starting $name..."
      $cmd </dev/null >/dev/null 2>${LOGDIR}/${logfile} &

      if [ $? -eq 0 ] ; then
         echo "OK"
      else
         echo "Failed"
      fi
   fi
}

# Stop a Progress batch mode session from running in the background.
progress_daemon_stop () {
   prog=$1
   name="${2:-$prog}"
   cmd="`dbconnect_cmd` -b -p $prog" 

   # See if the process is already stopped.
   PID=`progress_daemon_pid $prog`
   if [ "x$PID" = "x" ] ; then
      return 1
   else
      echo -n "Stopping $name..."

      # Kill off the process.
      kill $PID
      if [ $? -eq 0 ] ; then
         echo "OK"
      else
         echo "Failed"
      fi
   fi
}

# Find out if a progress batch mode session is running.
progress_daemon_status () {
   prog=$1
   name="${2:-$prog}"
   cmd="`dbconnect_cmd` -b -p $prog" 

   # See if the process is already stopped.
   PID=`progress_daemon_pid $prog`
   if [ "x$PID" = "x" ] ; then
      echo "$name is stopped."
   else
      echo "$name is running (PID=$PID)."
   fi
}

# Compile a single progress source file.  Args are the source file name
# and, optionally, the destination directory for the .r file.
progress_compile () {
   # Check the number of args.
   if [ $# -eq 1 ] ; then
      args=$1
   elif [ $# -eq 2 ] ; then
      args="$1,$2"
   fi

   echo -n "Progress compiling $1..."
   `dbconnect_cmd` -b -p $LIBDIR/compile.p -param $args

   if [ $? -eq 0 ] ; then
      echo "OK"
   else
      echo "Failed"
   fi
}


# Compile a single webspeed source file.  Args are the source file name
# and, optionally, the destination directory for the .w file.
webspeed_compile () {
   # Check the number of args.
   if [ $# -eq 1 ] ; then
      args=$1
   elif [ $# -eq 2 ] ; then
      args="$1,$2"
   fi

   echo -n "Webspeed compiling $1..."
   `dbconnect_cmd` -b -p $LIBDIR/wscompile.p -param $args

   if [ $? -eq 0 ] ; then
      echo "OK"
   else
      echo "Failed"
   fi
}


print () {
   printf "$@\n"
}


# Dump the contents of a database or single table into csv files.
# Args are optionally a database name or a database name plus a table name.
# If no args are passed, all databases are dumped.
progress_dump () {
   # Check the number of args.
   if [ $# -eq 1 ] ; then
      args=$1
      echo -n "Dumping database $1..."
   elif [ $# -eq 2 ] ; then
      args="$1,$2"
      echo -n "Dumping table $2 in database $1..."
   fi

   progress_run_batch $LIBDIR/dump.p $args

   if [ $? -eq 0 ] ; then
      echo "OK"
   else
      echo "Failed"
   fi
}

