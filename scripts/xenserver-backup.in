#!/bin/bash
#
#############
#    Copyright (C) 2014 Shawn Wilson <swilson@acs.on.ca>
#       
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#############
#
#
# This backup script was originally based on a snapshot-based backup
# script by Mark Round and Luis Davim.  It takes a snapshots of VMs
# and does an XVA backup of each one to a backup directory.  The list
# of VMs is stored in a config file.
#
# After backing up, the script deletes any old backups while preserving 
# the last n backups.  n is also specified in a config file.  For typical
# usage, you'd schedule this script to run once a week via a cron job.
#  

prefix=@prefix@
datarootdir=@datarootdir@
datadir=@datadir@


# Initialize functions and package variables.
. @datadir@/@PACKAGE@/init-functions

# If a lockfile exists, we're already running a backup!
if [ -f $LOCKFILE ]; then
        echo "Lockfile $LOCKFILE exists, exiting!"
        exit 1
fi

touch $LOCKFILE


# Date format must be %Y%m%d so we can sort them
BACKUP_DATE=$(date +"%Y%m%d%H%M")

# Temporary file
TEMP=/tmp/snapback.$$


echo " "
echo "=== Snapshot backup started at $(date) ==="
echo " "

# Loop through all the VMs listed.
sed '/^#/d' $VM_NAME_FILE | while read VM_NAME; do

    echo " "
    echo "== Backup for $VM_NAME started at $(date) =="

    #
    # Clean up old temporary snapshots.  In theory, there shouldn't be
    # any but maybe a previous backup crapped out.
    #
    echo "= Checking snapshots for $VM_NAME ="
    VM_SNAPSHOT_CHECK=$(${XE} snapshot-list name-label="${VM_NAME}-${SNAPSHOT_SUFFIX}" | xe_param uuid)
    if [ "$VM_SNAPSHOT_CHECK" != "" ]; then
        echo "Found old backup snapshot : $VM_SNAPSHOT_CHECK"
        echo "Deleting..."
        delete_snapshot $VM_SNAPSHOT_CHECK
    fi
    echo "Done."

    #
    # Snapshot the VM
    #
    echo "= Creating temporary backup snapshot ="
    SNAPSHOT_UUID=$(${XE} vm-snapshot vm="$VM_NAME" new-name-label="$VM_NAME-$SNAPSHOT_SUFFIX")
    echo "Created snapshot with UUID : $SNAPSHOT_UUID"

    #
    # Backup to XVA.
    #
    echo "= Exporting snapshot to XVA file ="
    XVA_PREFIX="${VM_NAME}-${BACKUP_SUFFIX}"
    XVA_FILE="${XVA_PATH}/${XVA_PREFIX}-${BACKUP_DATE}.xva"
    ${XE} vm-export vm=${SNAPSHOT_UUID} filename="${XVA_FILE}" compress=true
    echo "Done."
    

    #
    # Keep the most recent xva files.  The number of xva files to keep is 
    # stored in $XVA_RETAIN.
    #
    echo "= Removing old XVA files ="

    # This is kind of a goofy way of figuring out what files to delete
    # but it works.  You combine a list of all the xva files plus a list
    # of the the most recent ones.  The most recent ones will appear 
    # twice in the list.  Then, we use "uniq -u" to pick of the ones
    # that only appear once in the list and those are the files we blow
    # away.
    #
    (ls -t "${XVA_PATH}/${XVA_PREFIX}"-*.xva | head -n ${XVA_RETAIN} ; ls "${XVA_PATH}"/*.xva) | sort | uniq -u > $TEMP
    while read OLD_TEMPLATE; do
        echo "Removing : $OLD_TEMPLATE"
        rm $OLD_TEMPLATE
    done < $TEMP

    echo "== Backup for $VM_NAME finished at $(date) =="
    echo " "
done 

${XE} vbd-list > ${XVA_PATH}/vbd-mapping.txt

echo "=== Snapshot backup finished at $(date) ==="
echo " "

#Backup Pool meta-data:
mv ${XVA_PATH}/pool_metadata ${XVA_PATH}/pool_metadata.tmp
${XE} pool-dump-database file-name=${XVA_PATH}/pool_metadata
rm ${XVA_PATH}/pool_metadata.tmp

echo "=== Metadata backup started at $(date) ==="
echo " "


# NOTE: to restore metadata use:
# xe pool-restore-database file-name=@XVA_PATH@
# there is an option to test the backup with dry-run=true

echo "=== Metadata backup finished at $(date) ==="
echo " "

rm $TEMP
rm $LOCKFILE
